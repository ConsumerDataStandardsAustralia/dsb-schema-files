{
    "CommonEmailAddress": {
        "properties": {
            "address": {
                "description": "A correctly formatted email address, as defined by the addr_spec format in **[[RFC5322]](#nref-RFC5322)**",
                "type": "string",
                "x-cds-type": "ExternalRef"
            },
            "isPreferred": {
                "description": "May be true for one and only one email record in the collection. Denotes the default email address",
                "type": "boolean",
                "x-cds-type": "Boolean"
            },
            "purpose": {
                "description": "The purpose for the email, as specified by the customer (Enumeration)",
                "enum": [
                    "HOME",
                    "OTHER",
                    "UNSPECIFIED",
                    "WORK"
                ],
                "type": "string"
            }
        },
        "required": [
            "address",
            "purpose"
        ],
        "type": "object",
        "$id": "CommonEmailAddress"
    },
    "CommonOrganisation": {
        "properties": {
            "abn": {
                "description": "Australian Business Number for the organisation",
                "type": "string"
            },
            "acn": {
                "description": "Australian Company Number for the organisation. Required only if an ACN is applicable for the organisation type",
                "type": "string"
            },
            "agentFirstName": {
                "description": "The first name of the individual providing access on behalf of the organisation. For people with single names this field need not be present.  The single name should be in the lastName field",
                "type": "string"
            },
            "agentLastName": {
                "description": "The last name of the individual providing access on behalf of the organisation. For people with single names the single name should be in this field",
                "type": "string"
            },
            "agentRole": {
                "description": "The role of the individual identified as the agent who is providing authorisation.  Expected to be used for display. Default to Unspecified if the role is not known",
                "type": "string"
            },
            "businessName": {
                "description": "Name of the organisation",
                "type": "string"
            },
            "establishmentDate": {
                "description": "The date the organisation described was established",
                "type": "string",
                "x-cds-type": "DateString"
            },
            "industryCode": {
                "description": "A valid [ANZSIC](http://www.abs.gov.au/ANZSIC) code for the organisation. If the industry code held by the data holder is not one of the supported [ANZSIC](http://www.abs.gov.au/ANZSIC) versions, then it must not be supplied.",
                "type": "string",
                "x-cds-type": "ExternalRef"
            },
            "industryCodeVersion": {
                "default": "ANZSIC_1292.0_2006_V2.0",
                "description": "The applicable [ANZSIC](http://www.abs.gov.au/ANZSIC) release version of the industry code provided. Should only be supplied if ``industryCode`` is also supplied. If ``industryCode`` is supplied but ``industryCodeVersion`` is absent, default is ``ANZSIC_1292.0_2006_V2.0``",
                "enum": [
                    "ANZSIC_1292.0_2006_V1.0",
                    "ANZSIC_1292.0_2006_V2.0"
                ],
                "type": "string"
            },
            "isACNCRegistered": {
                "description": "True if registered with the ACNC.  False if not. Absent or null if not confirmed.",
                "type": "boolean",
                "x-cds-type": "Boolean"
            },
            "lastUpdateTime": {
                "description": "The date and time that this record was last updated by the customer. If no update has occurred then this date should reflect the initial creation date for the data",
                "type": "string",
                "x-cds-type": "DateTimeString"
            },
            "legalName": {
                "description": "Legal name, if different to the business name",
                "type": "string"
            },
            "organisationType": {
                "description": "Legal organisation type",
                "enum": [
                    "COMPANY",
                    "GOVERNMENT_ENTITY",
                    "OTHER",
                    "PARTNERSHIP",
                    "SOLE_TRADER",
                    "TRUST"
                ],
                "type": "string"
            },
            "registeredCountry": {
                "description": "Enumeration with values from [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country codes.  Assumed to be AUS if absent",
                "type": "string",
                "x-cds-type": "ExternalRef"
            },
            "shortName": {
                "description": "Short name used for communication, if different to the business name",
                "type": "string"
            }
        },
        "required": [
            "agentLastName",
            "agentRole",
            "businessName",
            "organisationType"
        ],
        "type": "object",
        "x-conditional": [
            "industryCodeVersion"
        ],
        "$id": "CommonOrganisation"
    },
    "CommonOrganisationDetailV2": {
        "allOf": [
            {
                "$ref": "CommonOrganisation"
            },
            {
                "required": [
                    "physicalAddresses"
                ],
                "type": "object",
                "properties": {
                    "physicalAddresses": {
                        "type": "array",
                        "description": "Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail",
                        "items": {
                            "$ref": "CommonPhysicalAddressWithPurpose"
                        }
                    }
                }
            }
        ],
        "$id": "CommonOrganisationDetailV2"
    },
    "CommonPAFAddress": {
        "description": "Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf)",
        "properties": {
            "buildingName1": {
                "description": "Building/Property name 1",
                "type": "string"
            },
            "buildingName2": {
                "description": "Building/Property name 2",
                "type": "string"
            },
            "dpid": {
                "description": "Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier",
                "type": "string"
            },
            "flatUnitNumber": {
                "description": "Unit number (including suffix, if applicable)",
                "type": "string"
            },
            "flatUnitType": {
                "description": "Type of flat or unit for the address",
                "type": "string"
            },
            "floorLevelNumber": {
                "description": "Floor or level number (including alpha characters)",
                "type": "string"
            },
            "floorLevelType": {
                "description": "Type of floor or level for the address",
                "type": "string"
            },
            "localityName": {
                "description": "Full name of locality",
                "type": "string"
            },
            "lotNumber": {
                "description": "Allotment number for the address",
                "type": "string"
            },
            "postalDeliveryNumber": {
                "description": "Postal delivery number if the address is a postal delivery type",
                "type": "integer",
                "x-cds-type": "PositiveInteger"
            },
            "postalDeliveryNumberPrefix": {
                "description": "Postal delivery number prefix related to the postal delivery number",
                "type": "string"
            },
            "postalDeliveryNumberSuffix": {
                "description": "Postal delivery number suffix related to the postal delivery number",
                "type": "string"
            },
            "postalDeliveryType": {
                "description": "Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file",
                "type": "string"
            },
            "postcode": {
                "description": "Postcode for the locality",
                "type": "string"
            },
            "state": {
                "description": "State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT",
                "type": "string"
            },
            "streetName": {
                "description": "The name of the street",
                "type": "string"
            },
            "streetSuffix": {
                "description": "The street type suffix. Valid enumeration defined by Australia Post PAF code file",
                "type": "string"
            },
            "streetType": {
                "description": "The street type. Valid enumeration defined by Australia Post PAF code file",
                "type": "string"
            },
            "thoroughfareNumber1": {
                "description": "Thoroughfare number for a property (first number in a property ranged address)",
                "type": "integer",
                "x-cds-type": "PositiveInteger"
            },
            "thoroughfareNumber1Suffix": {
                "description": "Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated",
                "type": "string"
            },
            "thoroughfareNumber2": {
                "description": "Second thoroughfare number (only used if the property has a ranged address eg 23-25)",
                "type": "integer",
                "x-cds-type": "PositiveInteger"
            },
            "thoroughfareNumber2Suffix": {
                "description": "Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated",
                "type": "string"
            }
        },
        "required": [
            "localityName",
            "postcode",
            "state"
        ],
        "type": "object",
        "$id": "CommonPAFAddress"
    },
    "CommonPerson": {
        "properties": {
            "firstName": {
                "description": "For people with single names this field need not be present. The single name should be in the lastName field. Where a data holder cannot determine first and middle names from a collection of given names, a single string representing all given names MAY be provided.",
                "type": "string"
            },
            "lastName": {
                "description": "For people with single names the single name should be in this field",
                "type": "string"
            },
            "lastUpdateTime": {
                "description": "The date and time that this record was last updated by the customer.  If no update has occurred then this date should reflect the initial creation date for the data",
                "type": "string",
                "x-cds-type": "DateTimeString"
            },
            "middleNames": {
                "description": "Field is mandatory but array may be empty",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "occupationCode": {
                "description": "Value is a valid **[[ANZSCO]](#iref-ANZSCO)** Standard Occupation classification code. If the occupation code held by the data holder is not one of the supported **[[ANZSCO]](#iref-ANZSCO)** versions, then it must not be supplied.",
                "type": "string",
                "x-cds-type": "ExternalRef"
            },
            "occupationCodeVersion": {
                "default": "ANZSCO_1220.0_2013_V1.2",
                "description": "The applicable **[[ANZSCO]](#iref-ANZSCO)** release version of the occupation code provided. Mandatory if an ``occupationCode`` is supplied. If ``occupationCode`` is supplied but ``occupationCodeVersion`` is absent, default is ``ANZSCO_1220.0_2013_V1.2``",
                "enum": [
                    "ANZSCO_1220.0_2006_V1.0",
                    "ANZSCO_1220.0_2006_V1.1",
                    "ANZSCO_1220.0_2013_V1.2",
                    "ANZSCO_1220.0_2013_V1.3"
                ],
                "type": "string"
            },
            "prefix": {
                "description": "Also known as title or salutation.  The prefix to the name (e.g. Mr, Mrs, Ms, Miss, Sir, etc)",
                "type": "string"
            },
            "suffix": {
                "description": "Used for a trailing suffix to the name (e.g. Jr)",
                "type": "string"
            }
        },
        "required": [
            "lastName",
            "middleNames"
        ],
        "type": "object",
        "x-conditional": [
            "occupationCodeVersion"
        ],
        "$id": "CommonPerson"
    },
    "CommonPersonDetailV2": {
        "allOf": [
            {
                "$ref": "CommonPerson"
            },
            {
                "required": [
                    "emailAddresses",
                    "phoneNumbers",
                    "physicalAddresses"
                ],
                "type": "object",
                "properties": {
                    "phoneNumbers": {
                        "type": "array",
                        "description": "Array is mandatory but may be empty if no phone numbers are held",
                        "items": {
                            "$ref": "CommonPhoneNumber"
                        }
                    },
                    "emailAddresses": {
                        "type": "array",
                        "description": "May be empty",
                        "items": {
                            "$ref": "CommonEmailAddress"
                        }
                    },
                    "physicalAddresses": {
                        "type": "array",
                        "description": "Array is mandatory but may be empty if no valid addresses are held. One and only one address may have the purpose of REGISTERED. Zero or one, and no more than one, record may have the purpose of MAIL. If zero then the REGISTERED address is to be used for mail",
                        "items": {
                            "$ref": "CommonPhysicalAddressWithPurpose"
                        }
                    }
                }
            }
        ],
        "$id": "CommonPersonDetailV2"
    },
    "CommonPhoneNumber": {
        "properties": {
            "areaCode": {
                "description": "Required for non Mobile Phones, if field is present and refers to Australian code - the leading 0 should be omitted.",
                "type": "string"
            },
            "countryCode": {
                "description": "If absent, assumed to be Australia (+61). The + should be included",
                "type": "string"
            },
            "extension": {
                "description": "An extension number (if applicable)",
                "type": "string"
            },
            "fullNumber": {
                "description": "Fully formatted phone number with country code, area code, number and extension incorporated. Formatted according to section 5.1.4. of **[[RFC3966]](#iref-RFC3966)**",
                "type": "string",
                "x-cds-type": "ExternalRef"
            },
            "isPreferred": {
                "description": "May be true for one and only one entry to indicate the preferred phone number. Assumed to be 'false' if not present",
                "type": "boolean",
                "x-cds-type": "Boolean"
            },
            "number": {
                "description": "The actual phone number, with leading zeros as appropriate",
                "type": "string"
            },
            "purpose": {
                "description": "The purpose of the number as specified by the customer",
                "enum": [
                    "HOME",
                    "INTERNATIONAL",
                    "MOBILE",
                    "OTHER",
                    "UNSPECIFIED",
                    "WORK"
                ],
                "type": "string"
            }
        },
        "required": [
            "fullNumber",
            "number",
            "purpose"
        ],
        "type": "object",
        "x-conditional": [
            "areaCode"
        ],
        "$id": "CommonPhoneNumber"
    },
    "CommonPhysicalAddress": {
        "properties": {
            "addressUType": {
                "description": "The type of address object present",
                "enum": [
                    "paf",
                    "simple"
                ],
                "type": "string"
            },
            "paf": {
                "$ref": "CommonPAFAddress"
            },
            "simple": {
                "$ref": "CommonSimpleAddress"
            }
        },
        "required": [
            "addressUType"
        ],
        "type": "object",
        "x-conditional": [
            "simple",
            "paf"
        ],
        "$id": "CommonPhysicalAddress"
    },
    "CommonPhysicalAddressWithPurpose": {
        "allOf": [
            {
                "$ref": "CommonPhysicalAddress"
            },
            {
                "required": [
                    "purpose"
                ],
                "type": "object",
                "properties": {
                    "purpose": {
                        "type": "string",
                        "description": "Enumeration of values indicating the purpose of the physical address",
                        "enum": [
                            "MAIL",
                            "OTHER",
                            "PHYSICAL",
                            "REGISTERED",
                            "WORK"
                        ]
                    }
                }
            }
        ],
        "$id": "CommonPhysicalAddressWithPurpose"
    },
    "CommonSimpleAddress": {
        "properties": {
            "addressLine1": {
                "description": "First line of the standard address object",
                "type": "string"
            },
            "addressLine2": {
                "description": "Second line of the standard address object",
                "type": "string"
            },
            "addressLine3": {
                "description": "Third line of the standard address object",
                "type": "string"
            },
            "city": {
                "description": "Name of the city or locality",
                "type": "string"
            },
            "country": {
                "default": "AUS",
                "description": "A valid [ISO 3166 Alpha-3](https://www.iso.org/iso-3166-country-codes.html) country code. Australia (AUS) is assumed if country is not present.",
                "type": "string",
                "x-cds-type": "ExternalRef"
            },
            "mailingName": {
                "description": "Name of the individual or business formatted for inclusion in an address used for physical mail",
                "type": "string"
            },
            "postcode": {
                "description": "Mandatory for Australian addresses",
                "type": "string"
            },
            "state": {
                "description": "Free text if the country is not Australia. If country is Australia then must be one of the values defined by the [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf) in the PAF file format. NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT",
                "type": "string"
            }
        },
        "required": [
            "addressLine1",
            "city",
            "state"
        ],
        "type": "object",
        "x-conditional": [
            "postcode"
        ],
        "$id": "CommonSimpleAddress"
    },
    "DiscoveryOutage": {
        "properties": {
            "duration": {
                "description": "Planned duration of the outage. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)",
                "type": "string",
                "x-cds-type": "ExternalRef"
            },
            "explanation": {
                "description": "Provides an explanation of the current outage that can be displayed to an end customer",
                "type": "string"
            },
            "isPartial": {
                "description": "Flag that indicates, if present and set to true, that the outage is only partial meaning that only a subset of normally available end points will be affected by the outage",
                "type": "boolean",
                "x-cds-type": "Boolean"
            },
            "outageTime": {
                "description": "Date and time that the outage is scheduled to begin",
                "type": "string",
                "x-cds-type": "DateTimeString"
            }
        },
        "required": [
            "duration",
            "explanation",
            "outageTime"
        ],
        "type": "object",
        "$id": "DiscoveryOutage"
    },
    "Links": {
        "properties": {
            "self": {
                "description": "Fully qualified link that generated the current response document",
                "type": "string",
                "x-cds-type": "URIString"
            }
        },
        "required": [
            "self"
        ],
        "type": "object",
        "$id": "Links"
    },
    "LinksPaginated": {
        "properties": {
            "first": {
                "description": "URI to the first page of this set. Mandatory if this response is not the first page",
                "type": "string",
                "x-cds-type": "URIString"
            },
            "last": {
                "description": "URI to the last page of this set. Mandatory if this response is not the last page",
                "type": "string",
                "x-cds-type": "URIString"
            },
            "next": {
                "description": "URI to the next page of this set. Mandatory if this response is not the last page",
                "type": "string",
                "x-cds-type": "URIString"
            },
            "prev": {
                "description": "URI to the previous page of this set. Mandatory if this response is not the first page",
                "type": "string",
                "x-cds-type": "URIString"
            },
            "self": {
                "description": "Fully qualified link that generated the current response document",
                "type": "string",
                "x-cds-type": "URIString"
            }
        },
        "required": [
            "self"
        ],
        "type": "object",
        "x-conditional": [
            "prev",
            "next",
            "first",
            "last"
        ],
        "$id": "LinksPaginated"
    },
    "Meta": {
        "type": "object",
        "$id": "Meta"
    },
    "MetaError": {
        "description": "Additional data for customised error codes",
        "properties": {
            "urn": {
                "description": "The CDR error code URN which the application-specific error code extends. Mandatory if the error `code` is an application-specific error rather than a standardised error code.",
                "type": "string"
            }
        },
        "type": "object",
        "x-conditional": [
            "urn"
        ],
        "$id": "MetaError"
    },
    "MetaPaginated": {
        "properties": {
            "totalPages": {
                "description": "The total number of pages in the full set. See [pagination](#pagination).",
                "type": "integer",
                "x-cds-type": "NaturalNumber"
            },
            "totalRecords": {
                "description": "The total number of records in the full set. See [pagination](#pagination).",
                "type": "integer",
                "x-cds-type": "NaturalNumber"
            }
        },
        "required": [
            "totalPages",
            "totalRecords"
        ],
        "type": "object",
        "$id": "MetaPaginated"
    },
    "ResponseCommonCustomer": {
        "properties": {
            "data": {
                "properties": {
                    "customerUType": {
                        "description": "The type of customer object that is present",
                        "enum": [
                            "organisation",
                            "person"
                        ],
                        "type": "string"
                    },
                    "organisation": {
                        "$ref": "CommonOrganisation"
                    },
                    "person": {
                        "$ref": "CommonPerson"
                    }
                },
                "required": [
                    "customerUType"
                ],
                "type": "object",
                "x-conditional": [
                    "person",
                    "organisation"
                ]
            },
            "links": {
                "$ref": "Links"
            },
            "meta": {
                "$ref": "Meta"
            }
        },
        "required": [
            "data",
            "links"
        ],
        "type": "object",
        "$id": "ResponseCommonCustomer"
    },
    "ResponseCommonCustomerDetailV2": {
        "properties": {
            "data": {
                "properties": {
                    "customerUType": {
                        "description": "The type of customer object that is present",
                        "enum": [
                            "organisation",
                            "person"
                        ],
                        "type": "string"
                    },
                    "organisation": {
                        "$ref": "CommonOrganisationDetailV2"
                    },
                    "person": {
                        "$ref": "CommonPersonDetailV2"
                    }
                },
                "required": [
                    "customerUType"
                ],
                "type": "object",
                "x-conditional": [
                    "person",
                    "organisation"
                ]
            },
            "links": {
                "$ref": "Links"
            },
            "meta": {
                "$ref": "Meta"
            }
        },
        "required": [
            "data",
            "links"
        ],
        "type": "object",
        "$id": "ResponseCommonCustomerDetailV2"
    },
    "ResponseCommonDiscoveryStatus": {
        "properties": {
            "data": {
                "properties": {
                    "detectionTime": {
                        "description": "The date and time that the current outage was detected. Should only be present if the status property is PARTIAL_FAILURE or UNAVAILABLE",
                        "type": "string",
                        "x-cds-type": "DateTimeString"
                    },
                    "expectedResolutionTime": {
                        "description": "The date and time that full service is expected to resume (if known). Should not be present if the status property has a value of OK.",
                        "type": "string",
                        "x-cds-type": "DateTimeString"
                    },
                    "explanation": {
                        "description": "Provides an explanation of the current outage that can be displayed to an end customer. Mandatory if the status property is any value other than OK",
                        "type": "string"
                    },
                    "status": {
                        "description": "Enumeration with values. OK (implementation is fully functional). PARTIAL_FAILURE (one or more end points are unexpectedly unavailable). UNAVAILABLE (the full implementation is unexpectedly unavailable). SCHEDULED_OUTAGE (an advertised outage is in effect)",
                        "enum": [
                            "OK",
                            "PARTIAL_FAILURE",
                            "SCHEDULED_OUTAGE",
                            "UNAVAILABLE"
                        ],
                        "type": "string"
                    },
                    "updateTime": {
                        "description": "The date and time that this status was last updated by the Data Holder.",
                        "type": "string",
                        "x-cds-type": "DateTimeString"
                    }
                },
                "required": [
                    "status",
                    "updateTime"
                ],
                "type": "object",
                "x-conditional": [
                    "explanation"
                ]
            },
            "links": {
                "$ref": "Links"
            },
            "meta": {
                "$ref": "Meta"
            }
        },
        "required": [
            "data",
            "links"
        ],
        "type": "object",
        "$id": "ResponseCommonDiscoveryStatus"
    },
    "ResponseDiscoveryOutagesList": {
        "properties": {
            "data": {
                "properties": {
                    "outages": {
                        "description": "List of scheduled outages. Property is mandatory but may contain and empty list if no outages are scheduled",
                        "items": {
                            "$ref": "DiscoveryOutage"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "outages"
                ],
                "type": "object"
            },
            "links": {
                "$ref": "Links"
            },
            "meta": {
                "$ref": "Meta"
            }
        },
        "required": [
            "data",
            "links"
        ],
        "type": "object",
        "$id": "ResponseDiscoveryOutagesList"
    },
    "ResponseErrorListV2": {
        "properties": {
            "errors": {
                "description": "",
                "items": {
                    "properties": {
                        "code": {
                            "description": "The code of the error encountered. Where the error is specific to the respondent, an application-specific error code, expressed as a string value. If the error is application-specific, the URN code that the specific error extends must be provided in the meta object. Otherwise, the value is the error code URN.",
                            "type": "string"
                        },
                        "detail": {
                            "description": "A human-readable explanation specific to this occurrence of the problem.",
                            "type": "string"
                        },
                        "meta": {
                            "$ref": "MetaError"
                        },
                        "title": {
                            "description": "A short, human-readable summary of the problem that MUST NOT change from occurrence to occurrence of the problem represented by the error code.",
                            "type": "string"
                        }
                    },
                    "required": [
                        "code",
                        "detail",
                        "title"
                    ],
                    "type": "object"
                },
                "type": "array"
            }
        },
        "required": [
            "errors"
        ],
        "type": "object",
        "x-conditional": [
            "meta"
        ],
        "$id": "ResponseErrorListV2"
    },
    "DataHolderBrandSummary": {
        "properties": {
            "abn": {
                "description": "Australian Business Number for the organisation",
                "maxLength": 11,
                "type": "string"
            },
            "acn": {
                "description": "Australian Company Number for the organisation",
                "maxLength": 9,
                "type": "string"
            },
            "arbn": {
                "description": "Australian Registered Body Number.  ARBNs are issued to registrable Australian bodies and foreign companies",
                "maxLength": 9,
                "type": "string"
            },
            "brandName": {
                "description": "The name of Data Holder Brand",
                "maxLength": 200,
                "type": "string"
            },
            "dataHolderBrandId": {
                "description": "Unique id of the Data Holder Brand issued by the CDR Register",
                "maxLength": 36,
                "type": "string",
                "x-conditional": true
            },
            "industries": {
                "description": "The industries the Data Holder Brand belongs to. Please note that the CDR Register entity model is constrained to one industry per brand which is planned to be relaxed in the future.",
                "items": {
                    "enum": [
                        "banking",
                        "energy",
                        "telco"
                    ],
                    "type": "string"
                },
                "type": "array",
                "uniqueItems": true
            },
            "interimId": {
                "description": "Interim id of the Data Holder Brand issued by the CDR Register. This is to be used to uniquely identify the record when dataHolderBrandId is not populated and is not to be reused",
                "maxLength": 36,
                "type": "string",
                "x-conditional": true
            },
            "lastUpdated": {
                "description": "The date/time that the Data Holder Brand data was last updated in the Register",
                "format": "date-time",
                "type": "string",
                "x-cds-type": "DateTimeString"
            },
            "logoUri": {
                "description": "Brand logo URI",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "publicBaseUri": {
                "description": "Base URI for the Data Holder's Consumer Data Standard public endpoints",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            }
        },
        "required": [
            "brandName",
            "publicBaseUri",
            "logoUri",
            "industries",
            "lastUpdated"
        ],
        "type": "object",
        "$id": "DataHolderBrandSummary"
    },
    "DataHoldersStatusList": {
        "properties": {
            "data": {
                "description": "Response data for the query",
                "items": {
                    "$ref": "DataHolderStatus"
                },
                "type": "array",
                "uniqueItems": true
            },
            "links": {
                "$ref": "Links"
            },
            "meta": {
                "$ref": "Meta"
            }
        },
        "required": [
            "data",
            "links",
            "meta"
        ],
        "type": "object",
        "$id": "DataHoldersStatusList"
    },
    "DataHolderStatus": {
        "properties": {
            "legalEntityId": {
                "description": "Unique id of the Data Holder Legal Entity issued by the CDR Register.",
                "maxLength": 36,
                "type": "string"
            },
            "status": {
                "description": "Data Holder status in the CDR Register",
                "enum": [
                    "ACTIVE",
                    "REMOVED"
                ],
                "type": "string"
            }
        },
        "required": [
            "legalEntityId",
            "status"
        ],
        "type": "object",
        "$id": "DataHolderStatus"
    },
    "DataRecipientBrandMetaData": {
        "description": "Metadata related to Data Recipient Brand",
        "properties": {
            "brandName": {
                "description": "Data Recipient Brand name",
                "maxLength": 200,
                "type": "string"
            },
            "dataRecipientBrandId": {
                "description": "Unique id of the Data Recipient brand issued by the CDR Register",
                "maxLength": 36,
                "type": "string"
            },
            "logoUri": {
                "description": "Data Recipient Brand logo URI",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "softwareProducts": {
                "items": {
                    "$ref": "SoftwareProductMetaData"
                },
                "type": "array",
                "uniqueItems": true
            },
            "status": {
                "description": "Data Recipient Brand status in the CDR Register",
                "enum": [
                    "ACTIVE",
                    "INACTIVE",
                    "REMOVED"
                ],
                "type": "string"
            }
        },
        "required": [
            "brandName",
            "dataRecipientBrandId",
            "logoUri",
            "status"
        ],
        "type": "object",
        "$id": "DataRecipientBrandMetaData"
    },
    "DataRecipientsStatusList": {
        "properties": {
            "data": {
                "description": "Response data for the query",
                "items": {
                    "$ref": "DataRecipientStatus"
                },
                "type": "array",
                "uniqueItems": true
            },
            "links": {
                "$ref": "Links"
            },
            "meta": {
                "$ref": "Meta"
            }
        },
        "required": [
            "data",
            "links",
            "meta"
        ],
        "type": "object",
        "$id": "DataRecipientsStatusList"
    },
    "DataRecipientStatus": {
        "properties": {
            "legalEntityId": {
                "description": "Unique id of the Data Recipient Legal Entity issued by the CDR Register",
                "maxLength": 36,
                "type": "string"
            },
            "status": {
                "description": "Data Recipient status in the CDR Register",
                "enum": [
                    "ACTIVE",
                    "SUSPENDED",
                    "REVOKED",
                    "SURRENDERED"
                ],
                "type": "string"
            }
        },
        "required": [
            "legalEntityId",
            "status"
        ],
        "type": "object",
        "$id": "DataRecipientStatus"
    },
    "JWK": {
        "description": "Object representing a JSON Web Key",
        "properties": {
            "alg": {
                "description": "The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key",
                "type": "string"
            },
            "e": {
                "description": "The \"e\" RSA public exponent parameter",
                "type": "string"
            },
            "key_ops": {
                "description": "The \"key_ops\" (key operations) parameter identifies the operation(s) for which the key is intended to be used",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "kid": {
                "description": "The \"kid\" (key ID) parameter is partially used to match a specific key. Note the \"kid\" parameter is not guaranteed unique and additional parameters should be used to progressively to identify a key within a set",
                "type": "string"
            },
            "kty": {
                "description": "The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key",
                "type": "string"
            },
            "n": {
                "description": "The \"n\" RSA public modulus parameter",
                "type": "string"
            }
        },
        "required": [
            "alg",
            "e",
            "key_ops",
            "kid",
            "kty",
            "n"
        ],
        "type": "object",
        "$id": "JWK"
    },
    "LegalEntityDetail": {
        "description": "The data that is common to all organisations, regardless of the type (e.g. company, trust, partnership, government)",
        "properties": {
            "abn": {
                "description": "Australian Business Number for the organisation",
                "maxLength": 11,
                "type": "string"
            },
            "acn": {
                "description": "Australian Company Number for the organisation",
                "maxLength": 9,
                "type": "string"
            },
            "anzsicDivision": {
                "description": "ANZSIC division of the organisation. **[[ANZSIC-2006]](#iref-ANZSIC-2006)**",
                "maxLength": 100,
                "type": "string"
            },
            "arbn": {
                "description": "Australian Registered Body Number.  ARBNs are issued to registrable Australian bodies and foreign companies",
                "maxLength": 9,
                "type": "string"
            },
            "legalEntityId": {
                "description": "Unique id of the organisation issued by the CDR Register",
                "maxLength": 36,
                "type": "string"
            },
            "legalEntityName": {
                "description": "Unique legal name of the organisation",
                "maxLength": 36,
                "type": "string"
            },
            "logoUri": {
                "description": "Legal Entity logo URI",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "organisationType": {
                "description": "Legal organisation type",
                "enum": [
                    "SOLE_TRADER",
                    "COMPANY",
                    "PARTNERSHIP",
                    "TRUST",
                    "GOVERNMENT_ENTITY",
                    "OTHER"
                ],
                "type": "string"
            },
            "registeredCountry": {
                "description": "Country of registeration (if the company is registered outside Australia)",
                "maxLength": 100,
                "type": "string"
            },
            "registrationDate": {
                "description": "Date of registration (if the company is registered outside Australia)",
                "format": "date",
                "type": "string",
                "x-cds-type": "DateString"
            },
            "registrationNumber": {
                "description": "Unique registration number (if the company is registered outside Australia)",
                "type": "string"
            },
            "status": {
                "enum": [
                    "ACTIVE",
                    "REMOVED"
                ],
                "type": "string"
            }
        },
        "required": [
            "legalEntityId",
            "legalEntityName",
            "logoUri",
            "status"
        ],
        "type": "object",
        "$id": "LegalEntityDetail"
    },
    "Links": {
        "properties": {
            "self": {
                "description": "Fully qualified link to this API call",
                "type": "string"
            }
        },
        "required": [
            "self"
        ],
        "type": "object",
        "$id": "Links"
    },
    "LinksPaginated": {
        "properties": {
            "first": {
                "description": "URI to the first page of this set. Mandatory if this response is not the first page",
                "type": "string"
            },
            "last": {
                "description": "URI to the last page of this set. Mandatory if this response is not the last page",
                "type": "string"
            },
            "next": {
                "description": "URI to the next page of this set. Mandatory if this response is not the last page",
                "type": "string"
            },
            "prev": {
                "description": "URI to the previous page of this set. Mandatory if this response is not the first page",
                "type": "string"
            },
            "self": {
                "description": "Fully qualified link to this API call",
                "type": "string"
            }
        },
        "required": [
            "self"
        ],
        "type": "object",
        "$id": "LinksPaginated"
    },
    "Meta": {
        "type": "object",
        "$id": "Meta"
    },
    "MetaError": {
        "description": "Additional data for customised error codes",
        "properties": {
            "urn": {
                "description": "The CDR error code URN which the application-specific error code extends. Mandatory if the error `code` is an application-specific error rather than a standardised error code.",
                "type": "string"
            }
        },
        "type": "object",
        "x-conditional": [
            "urn"
        ],
        "$id": "MetaError"
    },
    "MetaPaginated": {
        "properties": {
            "totalPages": {
                "description": "The total number of pages in the full set",
                "format": "int32",
                "type": "integer"
            },
            "totalRecords": {
                "description": "The total number of records in the full set",
                "format": "int32",
                "type": "integer"
            }
        },
        "required": [
            "totalPages",
            "totalRecords"
        ],
        "type": "object",
        "$id": "MetaPaginated"
    },
    "RegisterDataHolderAuth": {
        "description": "Defines the mechanism used and associated endpoints for Data Holder to Data Recipient authentication",
        "properties": {
            "jwksEndpoint": {
                "description": "JWKS endpoint used for authentication by the Data Holder with the Data Recipient",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "registerUType": {
                "description": "The type of authentication and authorisation mechanism in use",
                "enum": [
                    "SIGNED-JWT"
                ],
                "type": "string"
            }
        },
        "required": [
            "jwksEndpoint",
            "registerUType"
        ],
        "type": "object",
        "$id": "RegisterDataHolderAuth"
    },
    "RegisterDataHolderBrand": {
        "properties": {
            "authDetails": {
                "items": {
                    "$ref": "RegisterDataHolderAuth"
                },
                "type": "array",
                "uniqueItems": true
            },
            "brandName": {
                "description": "The name of Data Holder Brand",
                "maxLength": 200,
                "type": "string"
            },
            "dataHolderBrandId": {
                "description": "Unique id of the Data Holder Brand issued by the CDR Register",
                "maxLength": 36,
                "type": "string"
            },
            "endpointDetail": {
                "$ref": "RegisterDataHolderBrandServiceEndpoint"
            },
            "industries": {
                "description": "The industries the Data Holder Brand belongs to. Please note that the CDR Register entity model is constrained to one industry per brand which is planned to be relaxed in the future.",
                "items": {
                    "enum": [
                        "banking",
                        "energy",
                        "telco"
                    ],
                    "type": "string"
                },
                "type": "array",
                "uniqueItems": true
            },
            "lastUpdated": {
                "description": "The date/time that the Data Holder Brand data was last updated in the Register",
                "format": "date-time",
                "type": "string",
                "x-cds-type": "DateTimeString"
            },
            "legalEntity": {
                "$ref": "LegalEntityDetail"
            },
            "logoUri": {
                "description": "Brand logo URI",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "status": {
                "enum": [
                    "ACTIVE",
                    "INACTIVE",
                    "REMOVED"
                ],
                "type": "string"
            }
        },
        "required": [
            "authDetails",
            "brandName",
            "dataHolderBrandId",
            "endpointDetail",
            "industries",
            "lastUpdated",
            "legalEntity",
            "logoUri",
            "status"
        ],
        "type": "object",
        "$id": "RegisterDataHolderBrand"
    },
    "RegisterDataHolderBrandServiceEndpoint": {
        "description": "Endpoints related to Data Holder Brand services",
        "properties": {
            "extensionBaseUri": {
                "description": "Base URI for the Data Holder extension endpoints to the Consumer Data Standard (optional)",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "infosecBaseUri": {
                "description": "Base URI for the Data Holder's Consumer Data Standard information security endpoints",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "publicBaseUri": {
                "description": "Base URI for the Data Holder's Consumer Data Standard public endpoints",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "resourceBaseUri": {
                "description": "Base URI for the Data Holder's Consumer Data Standard resource endpoints",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "version": {
                "description": "The major version of the high level standards. This is not the version of the endpoint or the payload being requested but the version of the overall standards being applied. This version number will be \"v\" followed by the major version of the standards as a positive integer (e.g. v1, v12 or v76)",
                "type": "string"
            },
            "websiteUri": {
                "description": "Publicly available website or web resource URI",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            }
        },
        "required": [
            "infosecBaseUri",
            "publicBaseUri",
            "resourceBaseUri",
            "version",
            "websiteUri"
        ],
        "type": "object",
        "$id": "RegisterDataHolderBrandServiceEndpoint"
    },
    "RegisterDataRecipient": {
        "properties": {
            "accreditationLevel": {
                "description": "Accreditation level of the Data Recipient in the CDR Register",
                "enum": [
                    "UNRESTRICTED",
                    "SPONSORED"
                ],
                "type": "string"
            },
            "accreditationNumber": {
                "description": "CDR Register issued human readable unique number given to Data Recipients upon accreditation",
                "maxLength": 100,
                "type": "string"
            },
            "dataRecipientBrands": {
                "items": {
                    "$ref": "DataRecipientBrandMetaData"
                },
                "type": "array",
                "uniqueItems": true
            },
            "lastUpdated": {
                "description": "The date/time that the Legal Entity was last updated in the CDR Register",
                "format": "date-time",
                "type": "string",
                "x-cds-type": "DateTimeString"
            },
            "legalEntityId": {
                "description": "Unique id of the Data Recipient Legal Entity issued by the CDR Register.",
                "maxLength": 36,
                "type": "string"
            },
            "legalEntityName": {
                "description": "Legal name of the Data Recipient",
                "maxLength": 200,
                "type": "string"
            },
            "logoUri": {
                "description": "Legal Entity logo URI",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "status": {
                "description": "Data Recipient status in the CDR Register",
                "enum": [
                    "ACTIVE",
                    "SUSPENDED",
                    "REVOKED",
                    "SURRENDERED"
                ],
                "type": "string"
            }
        },
        "required": [
            "accreditationLevel",
            "accreditationNumber",
            "lastUpdated",
            "legalEntityId",
            "legalEntityName",
            "logoUri",
            "status"
        ],
        "type": "object",
        "$id": "RegisterDataRecipient"
    },
    "ResponseDataHoldersBrandSummaryList": {
        "properties": {
            "data": {
                "description": "Response data for the query",
                "items": {
                    "$ref": "DataHolderBrandSummary"
                },
                "type": "array",
                "uniqueItems": true
            },
            "links": {
                "$ref": "Links"
            },
            "meta": {
                "$ref": "Meta"
            }
        },
        "required": [
            "data",
            "links",
            "meta"
        ],
        "type": "object",
        "$id": "ResponseDataHoldersBrandSummaryList"
    },
    "ResponseErrorListV2": {
        "properties": {
            "errors": {
                "description": "",
                "items": {
                    "$ref": "ResponseErrorListV2_errors"
                },
                "type": "array"
            }
        },
        "required": [
            "errors"
        ],
        "type": "object",
        "x-conditional": [
            "meta"
        ],
        "$id": "ResponseErrorListV2"
    },
    "ResponseErrorListV2_errors": {
        "properties": {
            "code": {
                "description": "The code of the error encountered. Where the error is specific to the respondent, an application-specific error code, expressed as a string value. If the error is application-specific, the URN code that the specific error extends must be provided in the meta object. Otherwise, the value is the error code URN.",
                "type": "string"
            },
            "detail": {
                "description": "A human-readable explanation specific to this occurrence of the problem.",
                "type": "string"
            },
            "meta": {
                "$ref": "MetaError"
            },
            "title": {
                "description": "A short, human-readable summary of the problem that MUST NOT change from occurrence to occurrence of the problem represented by the error code.",
                "type": "string"
            }
        },
        "required": [
            "code",
            "detail",
            "title"
        ],
        "type": "object",
        "$id": "ResponseErrorListV2_errors"
    },
    "ResponseJWKS": {
        "description": "Response containing the JSON Web Key Set",
        "properties": {
            "keys": {
                "description": "The value of the \"keys\" parameter is an array of JWK values",
                "items": {
                    "$ref": "JWK"
                },
                "type": "array"
            }
        },
        "required": [
            "keys"
        ],
        "type": "object",
        "$id": "ResponseJWKS"
    },
    "ResponseOpenIDProviderConfigMetadata": {
        "description": "Response containing the Open ID Provider Configuration Metadata",
        "properties": {
            "claims_supported": {
                "description": "JSON array containing a list of the Claim Names of the Claims that the CDR Register supplies values for",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "code_challenge_methods_supported": {
                "description": "JSON array containing a list of Proof Key for Code Exchange (PKCE) **[[RFC7636]](#nref-RFC7636)** code challenge methods supported by this authorization server. Given the CDR Register does not support PKCE, this field can be safely ignored",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "grant_types_supported": {
                "description": "JSON array containing a list of the OAuth 2.0 Grant Type values that the CDR Register supports",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "id_token_signing_alg_values_supported": {
                "description": "JSON array containing a list of the JWS signing algorithms (alg values) supported by the CDR Register for the ID Token to encode the Claims in a JWT. Given the CDR Register does not issue ID tokens, this field can be safely ignored",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "issuer": {
                "description": "URL using the https scheme with no query or fragment component that the CDR Register asserts as its Issuer Identifier",
                "type": "string"
            },
            "jwks_uri": {
                "description": "URL of the CDR Register's JSON Web Key Set **[[JWK]](#nref-JWK)** document. This contains the signing key(s) used to validate access tokens issued from the CDR Register. Note that this differs from the JWKS endpoint used to validate SSAs and CDR Register client authentication",
                "type": "string"
            },
            "response_types_supported": {
                "description": "JSON array containing a list of the OAuth 2.0 response_type values that the CDR Registrer supports",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "scopes_supported": {
                "description": "JSON array containing a list of the OAuth 2.0 **[[RFC6749]](#nref-RFC6749)** scope values that the CDR Register supports",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "subject_types_supported": {
                "description": "JSON array containing a list of the Subject Identifier types that the CDR Register supports. Given the CDR Register does not issue ID tokens, this field can be safely ignored",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "tls_client_certificate_bound_access_tokens": {
                "description": "Boolean value indicating server support for mutual TLS client certificate bound access tokens",
                "type": "boolean"
            },
            "token_endpoint": {
                "description": "URL of the CDR Register's OAuth 2.0 Token Endpoint",
                "type": "string"
            },
            "token_endpoint_auth_methods_supported": {
                "description": "JSON array containing a list of Client Authentication methods supported by this Token Endpoint",
                "items": {
                    "type": "string"
                },
                "type": "array"
            },
            "token_endpoint_auth_signing_alg_values_supported": {
                "description": "JSON array containing a list of the JWS signing algorithms (alg values) supported by the token endpoint for the signature on the JWT **[[JWT]](#nref-JWT)** used to authenticate the client at the token endpoint for the \\\"private_key_jwt\\\" authentication method",
                "items": {
                    "type": "string"
                },
                "type": "array"
            }
        },
        "required": [
            "claims_supported",
            "code_challenge_methods_supported",
            "grant_types_supported",
            "id_token_signing_alg_values_supported",
            "issuer",
            "jwks_uri",
            "response_types_supported",
            "scopes_supported",
            "subject_types_supported",
            "tls_client_certificate_bound_access_tokens",
            "token_endpoint",
            "token_endpoint_auth_methods_supported",
            "token_endpoint_auth_signing_alg_values_supported"
        ],
        "type": "object",
        "$id": "ResponseOpenIDProviderConfigMetadata"
    },
    "ResponseRegisterDataHolderBrandList": {
        "description": "Response containing a list of CDR Register Data Holder Brand objects",
        "properties": {
            "data": {
                "description": "Response data for the query",
                "items": {
                    "$ref": "RegisterDataHolderBrand"
                },
                "type": "array",
                "uniqueItems": true
            },
            "links": {
                "$ref": "LinksPaginated"
            },
            "meta": {
                "$ref": "MetaPaginated"
            }
        },
        "required": [
            "data",
            "links",
            "meta"
        ],
        "type": "object",
        "$id": "ResponseRegisterDataHolderBrandList"
    },
    "ResponseRegisterDataRecipientList": {
        "description": "Response containing a list of Data Recipients in the CDR Register",
        "properties": {
            "data": {
                "description": "Response data for the query",
                "items": {
                    "$ref": "RegisterDataRecipient"
                },
                "type": "array",
                "uniqueItems": true
            },
            "links": {
                "$ref": "Links"
            },
            "meta": {
                "$ref": "Meta"
            }
        },
        "required": [
            "data",
            "links",
            "meta"
        ],
        "type": "object",
        "$id": "ResponseRegisterDataRecipientList"
    },
    "SoftwareProductMetaData": {
        "description": "Data Recipient Brand Software Products",
        "properties": {
            "logoUri": {
                "description": "Software product logo URI",
                "maxLength": 1000,
                "type": "string",
                "x-cds-type": "URIString"
            },
            "softwareProductDescription": {
                "description": "Description of the software product",
                "maxLength": 4000,
                "type": "string"
            },
            "softwareProductId": {
                "description": "Unique id of the Data Recipient software product issued by the CDR Register",
                "maxLength": 36,
                "type": "string"
            },
            "softwareProductName": {
                "description": "Name of the software product",
                "maxLength": 200,
                "type": "string"
            },
            "status": {
                "description": "Software Product status in the CDR Register",
                "enum": [
                    "ACTIVE",
                    "INACTIVE",
                    "REMOVED"
                ],
                "type": "string"
            }
        },
        "required": [
            "logoUri",
            "softwareProductId",
            "softwareProductName",
            "status"
        ],
        "type": "object",
        "$id": "SoftwareProductMetaData"
    },
    "SoftwareProductsStatusList": {
        "properties": {
            "data": {
                "description": "Response data for the query",
                "items": {
                    "$ref": "SoftwareProductStatus"
                },
                "type": "array",
                "uniqueItems": true
            },
            "links": {
                "$ref": "Links"
            },
            "meta": {
                "$ref": "Meta"
            }
        },
        "required": [
            "data",
            "links",
            "meta"
        ],
        "type": "object",
        "$id": "SoftwareProductsStatusList"
    },
    "SoftwareProductStatus": {
        "properties": {
            "softwareProductId": {
                "description": "Unique id of the software product issued by the CDR Register",
                "maxLength": 36,
                "type": "string"
            },
            "status": {
                "description": "Software product status in the CDR Register",
                "enum": [
                    "ACTIVE",
                    "INACTIVE",
                    "REMOVED"
                ],
                "type": "string"
            }
        },
        "required": [
            "softwareProductId",
            "status"
        ],
        "type": "object",
        "$id": "SoftwareProductStatus"
    }
}